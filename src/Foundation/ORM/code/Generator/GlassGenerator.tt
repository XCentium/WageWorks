<#@ assembly name="$(SolutionDir)lib\Sitecore\Sitecore.CodeGenerator.dll" #>
<#@ assembly name="$(SolutionDir)packages\Sitecore.Kernel.NoReferences.9.0.180604\lib\NET462\Sitecore.Kernel.dll" #>
<#@ assembly name="$(SolutionDir)packages\Glass.Mapper.Sc.Core.4.5.0.4\lib\111\Glass.Mapper.Sc.dll" #>
<#@ assembly name="$(SolutionDir)packages\Rainbow.Core.2.0.0\lib\net452\Rainbow.dll" #>
<#@ assembly name="$(SolutionDir)packages\Rainbow.Storage.Yaml.2.0.0\lib\net452\Rainbow.Storage.Yaml.dll" #>
<#@ import namespace="Sitecore.CodeGenerator" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Glass.Mapper.Sc.Fields" #>
<#@ include file="GlassMappedClassTemplate.tt" #>
<#+
// <copyright file="GlassGenerator.tt" company="">
//  Copyright © . All Rights Reserved. TextTemplatingFileGenerator
// </copyright>

public class FieldOptions
{
	public string GlassFieldTypeName { get; set; }
	public string AttributeExtras { get; set; }
    public string FieldNamespace { get; set; }
}

public class GlassGenerator : Generator
{
	public GlassMappedClassTemplate GlassTemplate { get; private set; }

	private Action<string,FieldOptions> SetCustomOptionsFunction { get; set; }

	private string Database { get; set; }
	private string[] Paths { get; set; }

	public List<string> GeneratedFiles { get; private set; }

    private string CustomNamespace { get; set;}

	public GlassGenerator(string database, string[] paths, Action<string,FieldOptions> setCustomOptionsFunction)
	{
		SetCustomOptionsFunction = setCustomOptionsFunction;
		Database = database;
		Paths = paths;
		this.GeneratedFiles = new List<string>();
	}

	protected override void RunCore()
	{
		// If you are using Rainbow serialization, you need to make some changes to the following lines
		// This is described on https://github.com/hermanussen/sitecore.codegenerator#using-unicorns-rainbow-format
		this.GlassTemplate = new GlassMappedClassTemplate();
       
		var resolver = new TemplatesResolverRainbow(
			Context.Host.ResolvePath(@"..\..\serialization\Templates"),
			Paths,
			Database);  
		foreach(var template in resolver.Templates)
		{
			this.GlassTemplate.Template = template;
			this.GlassTemplate.GetFieldOptionsFunction = GetFieldOptions;
			string fileName = string.Concat("I", this.GlassTemplate.Identifier(template.SyncItem.Name), ".gen.cs");
            fileName = fileName.Replace("_","");

             string filePath = template.SyncItem.ItemPath;
             
             foreach(var path in Paths)
              {   
                    filePath = filePath.Replace(path,"");                
              }

            var filePathSplit = filePath.Split('/');
            var cleanCount = filePathSplit.Count();
            var totalPathSplit = template.SyncItem.ItemPath.Split('/');
            var layerName = totalPathSplit.Reverse().Take(cleanCount+1).Reverse().FirstOrDefault().Replace(" ","");
            var folderName = totalPathSplit.Reverse().Take(cleanCount).Reverse().FirstOrDefault().Replace(" ","");

              

            filePath = filePath.Replace(" ","").Replace("/","\\");
            filePath = filePath.Substring(0,filePath.LastIndexOf("\\"));

            
             this.GlassTemplate.Namespace = "WageWorks." + layerName + "." + folderName + ".Models.Glass" + (string.IsNullOrEmpty(filePath) ? "" : "." + filePath.Replace("\\","."));             
             this.GlassTemplate.Paths = Paths;

            this.GlassTemplate.RenderToFile(@"..\..\code\Models\\Glass\\"+filePath+"\\"+fileName);

			//this.GlassTemplate.RenderToFile(fileName);

			this.GeneratedFiles.Add(fileName);
		}
	}

	public FieldOptions GetFieldOptions(string fieldType, string fieldId)
	{
		FieldOptions result = new FieldOptions();
		switch (fieldType)
		{
			case "Checkbox":
				result.GlassFieldTypeName = "bool";
				break;
			case "Integer":
				result.GlassFieldTypeName = "int";
				break;
			case "Number":
				result.GlassFieldTypeName = typeof(Decimal).Name;
				break;
			case "Date":
			case "Datetime":
				result.GlassFieldTypeName = typeof(DateTime).Name;
				break;
			case "File":
			case "File Drop Area":
				result.GlassFieldTypeName = typeof(File).Name;
				break;
			case "Name Value List":
			case "Name Lookup Value List":
				result.GlassFieldTypeName = typeof(System.Collections.Specialized.NameValueCollection).Name;
				break;
			// case "???": result.GlassFieldTypeName = typeof(HtmlEncodedString).Name; break;
			case "Image":
				result.GlassFieldTypeName = typeof(Image).Name;
				break;
			case "Droplink":
                result.GlassFieldTypeName = typeof(Guid).Name;
                break;
			case "Droptree":
			case "General Link":
			case "General Link with Search":
			case "Version Link":
			case "link":
				result.GlassFieldTypeName = typeof(Link).Name;
				break;
			// case "???": result.GlassFieldTypeName = typeof(LinkType).Name; break;
			case "Tristate":
				result.GlassFieldTypeName = typeof(TriState).Name;
				break;
			default:
				result.GlassFieldTypeName = "string";
				break;
		}
		SetCustomOptionsFunction(fieldId, result);
		return result;
	}
}
#>